// Code generated by sqlc. DO NOT EDIT.
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (Name,
                      Duration,
                      Price,
                      Description) VALUES (
                                           $1,$2,$3,$4
) RETURNING id, name, duration, price, description, created_at, updated_at, deleted_at
`

type CreateProductParams struct {
	Name        string          `json:"name"`
	Duration    sql.NullInt32   `json:"duration"`
	Price       sql.NullFloat64 `json:"price"`
	Description sql.NullString  `json:"description"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Duration,
		arg.Price,
		arg.Description,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Duration,
		&i.Price,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, duration, price, description, created_at, updated_at, deleted_at FROM products
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Duration,
		&i.Price,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, duration, price, description, created_at, updated_at, deleted_at FROM products
ORDER BY id
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Duration,
			&i.Price,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
